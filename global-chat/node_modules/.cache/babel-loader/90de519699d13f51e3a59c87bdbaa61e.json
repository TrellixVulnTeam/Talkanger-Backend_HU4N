{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sebas\\\\Desktop\\\\Chat App\\\\global-chat\\\\src\\\\components\\\\ChatBody.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ChatBody(props) {\n  _s();\n\n  const [currentMessage, setCurrentMessage] = useState(\"\");\n  const [messageList, setMessageList] = useState([]);\n\n  const sendMessage = async () => {\n    if (currentMessage !== \"\") {\n      const messageData = {\n        room: props.room,\n        author: props.username,\n        message: currentMessage,\n        time: new Date(Date.now()).getHours() + \":\" + new Date(Date.now()).getMinutes()\n      };\n      await props.socket.emit(\"send_message\", messageData);\n      setMessageList(list => [...list, messageData]);\n      setCurrentMessage(\"\");\n    }\n  };\n\n  useEffect(() => {\n    props.socket.on(\"receive_message\", data => {\n      setMessageList(list => [...list, data]);\n    });\n  }, [props.socket]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row chat-body\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message-container\",\n      children: messageList.map(messageContent => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message\",\n          id: props.username === messageContent.author ? \"you\" : \"other\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"row gx-0\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"col-1 user-picture\",\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  className: \"rounded bg-light user-image\",\n                  src: `https://avatars.dicebear.com/api/bottts/:${messageContent.author}.svg`,\n                  alt: `${props.username}'s Profile Character`\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 44,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 43,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"col text-start message-content\",\n                children: /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: messageContent.message\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 52,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 51,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 42,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \" row message-meta\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"col text-secondary\",\n                children: /*#__PURE__*/_jsxDEV(\"p\", {\n                  id: \"author\",\n                  children: [\" \", /*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: messageContent.author\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 59,\n                    columnNumber: 41\n                  }, this), \" at \", messageContent.time]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 59,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 58,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 13\n  }, this);\n}\n\n_s(ChatBody, \"gDKz+24cg75HOdfXSFFmVy0ndt0=\");\n\n_c = ChatBody;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatBody\");","map":{"version":3,"sources":["C:/Users/sebas/Desktop/Chat App/global-chat/src/components/ChatBody.js"],"names":["React","useEffect","useState","ChatBody","props","currentMessage","setCurrentMessage","messageList","setMessageList","sendMessage","messageData","room","author","username","message","time","Date","now","getHours","getMinutes","socket","emit","list","on","data","map","messageContent"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\nexport default function ChatBody(props) {\r\n\r\n    const [currentMessage, setCurrentMessage] = useState(\"\");\r\n    const [messageList, setMessageList] = useState([]);\r\n\r\n    const sendMessage = async () => {\r\n        if (currentMessage !== \"\") {\r\n          const messageData = {\r\n            room: props.room,\r\n            author: props.username,\r\n            message: currentMessage,\r\n            time:\r\n              new Date(Date.now()).getHours() +\r\n              \":\" +\r\n              new Date(Date.now()).getMinutes(),\r\n          };\r\n    \r\n          await props.socket.emit(\"send_message\", messageData);\r\n          setMessageList((list) => [...list, messageData]);\r\n          setCurrentMessage(\"\");\r\n        }\r\n      };\r\n    \r\n      useEffect(() => {\r\n        props.socket.on(\"receive_message\", (data) => {\r\n          setMessageList((list) => [...list, data]);\r\n        });\r\n      }, [props.socket]);\r\n\r\n    return (\r\n            <div className=\"row chat-body\">\r\n        <div className=\"message-container\">\r\n          {messageList.map((messageContent) => {\r\n            return (\r\n              <div\r\n                className=\"message\"\r\n                id={props.username === messageContent.author ? \"you\" : \"other\"}\r\n              >\r\n                <div>\r\n                  <div className=\"row gx-0\">\r\n                    <div className=\"col-1 user-picture\">\r\n                      <img\r\n                        className=\"rounded bg-light user-image\"\r\n                        src={`https://avatars.dicebear.com/api/bottts/:${messageContent.author}.svg`}\r\n                        alt={`${props.username}'s Profile Character`}\r\n                      />\r\n                    </div>\r\n\r\n                    <div className=\"col text-start message-content\">\r\n                      <p>{messageContent.message}</p>\r\n                    </div>\r\n\r\n                  </div>\r\n\r\n                    <div className=\" row message-meta\">\r\n                      <div className=\"col text-secondary\">\r\n                        <p id=\"author\"> <strong>{messageContent.author}</strong> at {messageContent.time}</p>\r\n                      </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}